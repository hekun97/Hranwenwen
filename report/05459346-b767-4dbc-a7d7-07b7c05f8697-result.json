{"name": "test_001_login_success[test1234-test1234-\\u767b\\u5f55\\u6210\\u529f1]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not dict", "trace": "self = <testcase.test01_login.TestLogin object at 0x10242dc50>\nuname = 'test1234', upwd = 'test1234', expect = '登录成功'\n\n    @pytest.mark.parametrize(\"uname, upwd, expect\", utils.get_login_data_by_excel(2, 3))\n    # 定义日志级别为CRITICAL\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_001_login_success(self, uname, upwd, expect):\n        logging.info(\"用例输入数据如下：用户名：{}，密码：{}，预期结果：{}\".format(uname, upwd, expect))\n        # 发送请求附带数据\n        json_data = {\"uname\": uname, \"upwd\": upwd}\n>       response = self.login_api.login(json_data)\n\ntest01_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../api/login/login.py:19: in login\n    python_obj = json.loads(json_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = {'uname': 'test1234', 'upwd': 'test1234'}, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not dict\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:339: TypeError"}, "parameters": [{"name": "uname", "value": "'test1234'"}, {"name": "upwd", "value": "'test1234'"}, {"name": "expect", "value": "'登录成功'"}], "start": 1710170452292, "stop": 1710170452292, "uuid": "0256a073-3a1d-4ea0-b484-3fc30dd9b0fd", "historyId": "6261ef6205cdb334abd6178168c8e559", "testCaseId": "5e617d0a494d476c894db1d54060c1ec", "fullName": "testcase.test01_login.TestLogin#test_001_login_success", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test01_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "hkdeMacBook-Pro"}, {"name": "thread", "value": "65101-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test01_login"}]}